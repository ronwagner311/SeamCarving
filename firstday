import  javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
public class hw1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
	}
	
	
	public static int getRed(int pixel) {
		return (pixel>>16)&0xff;
	}
	
	public static int getBlue(int pixel) {
		return (pixel)&0xff;
	}
	
	public static int getGreen(int pixel) {
		return (pixel>>8)&0xff;
	}
	//return 2 if its a corner
	//return 1 if its on edge
	//return 0 if its a inner value;
	public static int checkEdge(int[][] imgArray,int i,int j) {
		if(i==imgArray.length-1 && j==imgArray[0].length-1)
			return 2;
		if(i==0 && j==0)
			return 2;
		if(i==imgArray.length-1 && j==0)
			return 2;
		if(i==0 && j==imgArray[0].length-1)
			return 2;
		if(i==0)
			return 1;
		if(j==0)
			return 1;
		if(i==imgArray.length-1)
			return 1;
		if(j==imgArray[0].length-1)
			return 1;
		return 0;
	}
	public static int energyCal(int pixel1,int pixel2) {
		int Ri,R1,Gi,G1,Bi,B1;
		Ri=getRed(pixel1);
		Gi=getGreen(pixel1);
		Bi=getBlue(pixel1);
		R1=getRed(pixel2);
		G1=getGreen(pixel2);
		B1=getBlue(pixel2);
		return (Math.abs(Ri-R1)+Math.abs(Bi-B1)+Math.abs(Gi-G1));
		
	}
	
	public static int entropyCal(int[][] imgArray) {
		return 0;
	}
	
	public static int Energyfun(int[][] imgArray, int energyType, int i, int j) {
		int sum=0;
		int edge=checkEdge(imgArray,i,j);
		if(edge==2) {
			if(i==0 && j==0) {
				sum+=energyCal(imgArray[i][j],imgArray[i][j+1]);
				sum+=energyCal(imgArray[i][j],imgArray[i+1][j]);
				sum+=energyCal(imgArray[i][j],imgArray[i+1][j+1]);
			}
			if(i==0 && j==imgArray[0].length-1) {
				sum+=energyCal(imgArray[i][j],imgArray[i][j-1]);
				sum+=energyCal(imgArray[i][j],imgArray[i+1][j]);
				sum+=energyCal(imgArray[i][j],imgArray[i+1][j-1]);
			}
			if(i==imgArray.length-1 && j==0) {
				sum+=energyCal(imgArray[i][j],imgArray[i][j+1]);
				sum+=energyCal(imgArray[i][j],imgArray[i-1][j]);
				sum+=energyCal(imgArray[i][j],imgArray[i-1][j+1]);
			}
			if(i==imgArray.length-1 && j==imgArray[0].length-1) {
				sum+=energyCal(imgArray[i][j],imgArray[i][j-1]);
				sum+=energyCal(imgArray[i][j],imgArray[i-1][j]);
				sum+=energyCal(imgArray[i][j],imgArray[i-1][j-1]);
			}
		}
		else if(edge==1) {
			if(i==0) {
				for(int k=i;k<=i+1;i++) {
					for(int w=j-1;w<=j+1;j++) {
						if(k!=i && w!=j) {
							sum+=energyCal(imgArray[i][j],imgArray[k][w]);
						}
					}
				}
			}
			if(j==0) {
				for(int k=i-1;k<=i+1;i++) {
					for(int w=j;w<=j+1;j++) {
						if(k!=i && w!=j) {
							sum+=energyCal(imgArray[i][j],imgArray[k][w]);
						}
					}
				}
			}
			if(i==imgArray.length-1) {
				for(int k=i-1;k<=i;i++) {
					for(int w=j-1;w<=j+1;j++) {
						if(k!=i && w!=j) {
							sum+=energyCal(imgArray[i][j],imgArray[k][w]);
						}
					}
				}
			}
			if(j==imgArray[0].length-1) {
				for(int k=i-1;k<=i+1;i++) {
					for(int w=j-1;w<=j;j++) {
						if(k!=i && w!=j) {
							sum+=energyCal(imgArray[i][j],imgArray[k][w]);
						}
					}
				}
			}
		}
		else {
			for(int k=i-1;k<=i+1;i++) {
				for(int w=j-1;w<=j+1;j++) {
					if(k!=i && w!=j) {
						sum+=energyCal(imgArray[i][j],imgArray[k][w]);
					}
				}
			}	
		}
		return sum;
	}
	
	

}
